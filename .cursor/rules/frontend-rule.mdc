---
description: frontend project policy
globs: frontend/**/*.*
alwaysApply: false
---

# フロントエンドプロジェクトポリシー

## コーディング規約

1. **TypeScript**を使用し、型定義を厳格に行う
   - `any`型の使用は極力避ける
   - 関数の引数と戻り値には必ず型を指定する

2. **コンポーネント設計**
   - Reactコンポーネントは関数コンポーネントを使用する
   - Propsには必ずインターフェースを定義する
   - 大きなコンポーネントは小さなコンポーネントに分割する

3. **スタイリング**
   - CSSモジュールを使用してスタイルのスコープを限定する
   - ファイル名は `[コンポーネント名].module.css` の形式にする
   - レスポンシブデザインを考慮する

4. **状態管理**
   - ローカル状態には `useState` を使用
   - 複雑な状態管理には `redux-saga` を使用

5. **ファイル構成**
   - `pages/`: ルーティング用のページコンポーネント
   - `components/`: 再利用可能なUIコンポーネント
   - `hooks/`: カスタムフック
   - `utils/`: ユーティリティ関数
   - `types/`: 型定義
   - `styles/`: グローバルスタイルとテーマ

6. **命名規則**
   - コンポーネント: PascalCase (例: `UserProfile.tsx`)
   - フック: camelCase、`use`プレフィックス (例: `useAuth.ts`)
   - ユーティリティ: camelCase (例: `formatDate.ts`)

## パフォーマンス最適化

1. メモ化を適切に使用する (`useMemo`, `useCallback`)
2. 画像最適化には Next.js の `Image` コンポーネントを使用する
3. コンポーネントの不要な再レンダリングを防ぐ

## アクセシビリティ

1. セマンティックなHTMLを使用する
2. WAI-ARIAの属性を適切に使用する
3. キーボードナビゲーションをサポートする
4. 色のコントラスト比を考慮する

## テスト

1. コンポーネントには単体テストを書く (Jest + React Testing Library)
2. 重要なユーザーフローにはE2Eテストを書く (Cypress)

## ビルドとデプロイ

1. コミット前に `lint` と `type-check` を実行する
2. CI/CDパイプラインでテストを自動化する
3. 本番環境では常にプロダクションビルドを使用する 